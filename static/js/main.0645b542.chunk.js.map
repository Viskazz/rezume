{"version":3,"sources":["App.tsx","hooks/useScroll.ts","serviceWorker.ts","index.tsx"],"names":["App","scrollY","useState","document","body","getBoundingClientRect","top","setScrollY","listener","useEffect","window","addEventListener","removeEventListener","useScroll","shrink","setShrink","setTimeout","className","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0OA4CeA,MAvCf,WAAgB,IACPC,ECHM,WAAqB,IAAD,EACDC,mBAASC,SAASC,KAAKC,wBAAwBC,KAD9C,mBACxBL,EADwB,KACfM,EADe,KAGzBC,EAAW,WACfD,GAAYJ,SAASC,KAAKC,wBAAwBC,MAUpD,OAPAG,qBAAU,WAER,OADAC,OAAOC,iBAAiB,SAAUH,GAC3B,WACLE,OAAOE,oBAAoB,SAAUJ,OAIlC,CAACP,WDXQY,GAAXZ,QADM,EAGeC,mBAAS,IAHxB,mBAGNY,EAHM,KAGEC,EAHF,KAYb,OANEC,YAAW,WACWD,EAAhBd,GAAW,IAAe,SACf,MACd,KAIH,yBAAKgB,UAAU,OACb,4BAAQA,UAAS,qBAAgBH,IAC/B,yBAAKG,UAAU,aACb,yBAAKA,UAAS,eAAUH,IACtB,yGACA,sGAEF,6BACE,+CACA,uBAAGG,UAAS,UAAKH,IAAjB,wBAKN,yBAAKG,UAAU,YACb,0CACA,uCAAahB,GACb,sCAAYa,GACZ,iCACE,6BAAK,+yBEzBKI,QACW,cAA7BR,OAAOS,SAASC,UAEe,UAA7BV,OAAOS,SAASC,UAEhBV,OAAOS,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFrB,SAASsB,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0645b542.chunk.js","sourcesContent":["import React, {useState, useEffect} from 'react';\nimport useScroll from './hooks/useScroll';\n// import logo from './logo.svg';\nimport './App.css';\n\nfunction App() {\n  const {scrollY} = useScroll();\n\n  const [shrink, setShrink] = useState('');\n\n   (function() {\n    setTimeout(()=>{\n      if (scrollY >= 100) setShrink('shrink')\n      else setShrink('');\n    }, 250)\n  })()\n  \n  return (\n    <div className=\"App\">\n      <header className={`App-header ${shrink}`}>\n        <div className=\"App-inner\">\n          <div className={`name ${shrink}`}>\n            <h1>Пронин Виктор</h1>\n            <p>Web-разработчик</p>\n          </div>\n          <nav>\n            <p>+79778327368&nbsp;</p>\n            <p className={`${shrink}`}>exppro1@gmail.com</p>\n          </nav>\n        </div>\n\n      </header>\n      <div className=\"App-main\">\n        <h1>Main Block</h1>\n        <p>scrollY: {scrollY}</p>\n        <p>shrink: {shrink}</p>\n        <section>\n          <div><p>Cardigan gluten-free photo booth pug, occupy ethnic bicycle rights disrupt ennui jean shorts art party raw denim Carles Tonx artisan. Freegan aesthetic skateboard, forage iPhone ugh umami tumblr McSweeney's chillwave biodiesel vinyl pitchfork gentrify asymmetrical. Sartorial synth wayfarers, freegan pork belly post-ironic ennui salvia direct trade shoreditch Wes Anderson pitchfork. Mumblecore Truffaut american apparel, Austin single-origin coffee post-ironic tofu retro Vice fanny pack narwhal Neutra skateboard 90's. Kogi sartorial post-ironic gentrify helvetica McSweeney's Schlitz, mustache 8-bit polaroid hella flexitarian viral kale chips tote bag. Banh mi PBR typewriter Banksy. Beard messenger bag deep v, keffiyeh lo-fi umami four loko vinyl lomo hoodie wolf banh mi.</p></div>\n        </section>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React, {useState, useEffect} from 'react';\n\n// кастомный хук\nexport default function useScroll(){\n    const [scrollY, setScrollY] = useState(document.body.getBoundingClientRect().top);\n  \n    const listener = ()=> {\n      setScrollY(-document.body.getBoundingClientRect().top);\n    };\n    \n    useEffect(() => {\n      window.addEventListener(\"scroll\", listener);\n      return () => {\n        window.removeEventListener(\"scroll\", listener);\n      };\n    });\n  \n    return {scrollY}\n  }","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}