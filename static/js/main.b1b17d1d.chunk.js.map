{"version":3,"sources":["sections/Experience3.tsx","sections/Experience2.tsx","sections/Experience1.tsx","sections/Experience0.tsx","sections/JobName.tsx","sections/KeyPractice.tsx","App.tsx","hooks/useScroll.ts","ErrorWrapper.tsx","serviceWorker.ts","index.tsx"],"names":["Experience3","className","Experience2","Experience1","Experience0","JobName","Tag","props","name","KeyPractice","App","scrollY","useState","setScrollY","listener","document","body","getBoundingClientRect","top","window","pageYOffset","useEffect","addEventListener","removeEventListener","useScroll","shrink","setShrink","setTimeout","job","phone","email","ErrorWrapper","state","hasError","error","info","this","setState","console","log","componentStack","children","Component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","message"],"mappings":"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","file":"static/js/main.b1b17d1d.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Experience3 = () =>{\n    return (\n        <section>\n          <div className=\"subheading\"><h2>Опыт работы $lt 12 лет</h2>\n            <div className=\"flex-wrapper\">\n              <div className=\"left\"><p>Февраль 2013 — по настоящее время</p><span className=\"gray\">7 лет 5 месяцев</span></div>\n              <div className=\"right\">\n                <span>ООО \"Алгоритм-Эксперт\"</span>\n                <p>Основным направлением деятельности компании является разработка и внедрение программно-аппаратных комплексов (систем самообслуживания на базе инфокиосков, сенсорных информационных панелей).</p>\n                <p>За годы работы выполнено большое количество реализаций программных разработок для гос. заказчиков и частных компаний в таких областях, как ритейл, производство, добыча полезных ископаемых, ЖКХ, медицина и др.</p>\n                <ul>\n                  <li>Постановка задач и участие в выборе архитектуры приложений.</li>\n                  <li>Собеседование с фриланс-разработчиками, ревью кода, рефакторинг.</li>\n                  <li>Работа как в команде, так и самостоятельная разработка (в работе использовались BitBucket, Trello, Slack).</li>\n                  <li>Уверенные знания JS (включая последние спецификации), HTML5, CSS3.</li>\n                  <li>Разработка SPA приложений с использованием ReactJS, в том числе с Server Side Rendering (Next.JS).</li>\n                  <li>Хорошее знание ReactJS, Redux, React-Hooks, react-router, Saga, axios, async, promises и др. технологий.</li>\n                  <li>TypeScript, в том числе миграция имеющихся проектов (frontend на React'e + backend), TSLint.</li>\n                  <li>Понимание событийного цикла, однопоточности, ассинхронной природы браузера и Node.JS.</li>\n                  <li>Использование NW.JS (в прошлом Node-Webkit) в качестве среды для разработки кроссплатформенных приложений на Javascript.</li>\n                  <li>Хорошее понимание UX. Работал с Material Design, Ant, Styled Components, реализация анимаций, плавных переходов, hover-эффектов и т.д.</li>\n                  <li>Работа с API Telegram.</li>\n                  <li>Адаптивная верстка, media queryes, Flexbox.</li>\n                  <li>Верстка с использованием Bootstrap.</li>\n                  <li>Использование инструментов: npm, yarn, webpack.</li>\n                  <li>Опыт работы Git.</li>\n                  <li>Опыт работы с websockets (также с фрэймворком Feathers).</li>\n                  <li>Знание backend-технологий: Node.JS, Express, JWT, JSON + REST-API, Mocha+chai, а также БД Mongodb, Postgres, есть представление о GraphQL, опыт с CORS.</li>\n                  <li>Отладка запросов с Postman.</li>\n                  <li>Опыт работы с Docker, nginx, настройка KVM-сервера в production.</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </section>\n    )\n}","import React from 'react';\n\nexport const Experience2 = () =>{\n    return (\n        <section>\n          <div className=\"subheading\">\n            <div className=\"flex-wrapper\">\n              <div className=\"left\"><p>Ноябрь 2008 — март 2011</p><span className=\"gray\">2 года 5 месяцев</span></div>\n              <div className=\"right\">\n                <span>ООО \"ИТ-Инновации\"</span>\n                <ul>\n                    <li>Разработка внутренней CRM-системы на языке программирования C# (WPF\\XAML), использование .Net Framework 3.5</li>\n                    <li>Изучение паттернов MVC и MVVM.</li>\n                    <li>Разработка специализированного коммерческого браузера (на движке Trident, C#, WinForms).</li>\n                    <li>Опыт работы с lamp.</li>\n                    <li>Опыт программирования на PHP4 (сайты, приложения, лендинги, админки).</li>\n                    <li>Опыт настройки и работы с РСУБД MySQL, Firebase, Postgres.</li>\n                    <li>Использование jQuery, плагины.</li>\n                    <li>Использование JS на клиентской стороне для управления IP-звонками через Asterisk.</li>\n                </ul>\n              </div>\n            </div>\n          </div>\n        </section>\n    )\n}","import React from 'react';\n\nexport const Experience1 = () => {\n    return (\n        <section>\n            <div className=\"subheading\">\n                <div className=\"flex-wrapper\">\n                    <div className=\"left\"><p>Январь 2007 — январь 2008</p><span className=\"gray\">1 год 1 месяц</span></div>\n                    <div className=\"right\">\n                        <span>ООО \"Электромонтаж\"</span>\n                        <ul>\n                            <li>Консультирование клиентов компании по выбору и использованию оборудования для учета энергоресурсов.</li>\n                            <li>Руководство отделом разработки.</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </section>\n    )\n}","import React from 'react';\n\nexport const Experience0 = () => {\n    return (\n        <section>\n            <div className=\"subheading\">\n                <div className=\"flex-wrapper\">\n                    <div className=\"left\"><p>Январь 2006 — январь 2007</p><span className=\"gray\">1 год 1 месяц</span></div>\n                    <div className=\"right\">\n                        <span>ООО \"Электромонтаж\"</span>\n                        <p>Компания - первопроходец на рынке внедрения электронного коммерческого учета энергоресурсов.</p>\n                        <ul>\n                        <li>Разработка и внедрение систем коммерческого учета электроэнергии на базе оборудования «Связь Инжиниринг М» (г. Москва), НТЦ «Арго» (г. Иваново), «Инкотекс» (г. Москва), НЗИФ (г. Н.-Новгород).</li>\n                        <li>Подключение энергосбытовых организаций к собственной системе мониторинга (программирование на Delphi, WinApi).</li>\n                        <li>Разработка корпоративного сайта (JS, PHP, Jquery).</li>\n                        <li>Настройка специализированного оборудования для передачи данных.</li>\n                        <li>Программирование AT-модемов Wavecom.</li>\n                        <li>Поддержание серверной инфраструктуры организации.</li>\n                        </ul>\n                    </div>\n                </div>\n            </div>\n        </section>\n    )\n}","import React from 'react';\n\nexport const JobName = () =>{\n    return (\n        <section>\n          <div className=\"subheading\"><h2>Web-разработчик</h2>\n            <span>Информационные технологии, интернет, телеком</span>\n            <ul>\n              <li>Программирование, Разработка</li>\n              <li>Web инженер</li>\n              <li>Web мастер</li></ul>\n            <p>Занятость: полная занятость</p>\n            <p>График работы: полный день</p>\n          </div>\n        </section>\n    )\n}","import React from 'react';\n\ntype TagProps = {\n    name: string,\n  }\n\nconst Tag = ( props : TagProps ) => {\n    return (\n    <div className=\"tag\"><span>{props.name}</span></div>\n    );\n};\n\nexport const KeyPractice = () => {\n    return (\n        <section>\n            <div className=\"subheading\">\n                <div className=\"flex-wrapper\">\n                    <div className=\"left\"><p>Ключевые навыки</p></div>\n                    <div className=\"right\">\n                        <div className=\"tags-container\">\n                            <Tag name=\"JavaScript\"/>\n                            <Tag name=\"TypeScript\"/>\n                            <Tag name=\"ES6\"/>\n                            <Tag name=\"ES7/8\"/>\n                           \n                            <Tag name=\"ReactJS\"/>\n                            <Tag name=\"Redux\"/>\n                            <Tag name=\"Thunk\"/>\n                            <Tag name=\"hooks\"/>\n                            <Tag name=\"Next.js\"/>\n                            <Tag name=\"SPA/SSR\"/>\n\n                            <Tag name=\"HTML5\"/>\n                            <Tag name=\"CSS3\"/>\n                            <Tag name=\"Material Design\"/>\n                            <Tag name=\"ANT\"/>\n                            <Tag name=\"Bootstrap\"/>\n                            <Tag name=\"Flexbox\"/>\n\n                            <Tag name=\"TSLint\"/>\n                            <Tag name=\"Node.js\"/>\n                            <Tag name=\"Node-Webkit\"/>\n                            <Tag name=\"npm\"/>\n                            <Tag name=\"bash\"/>\n                            <Tag name=\"REST API\"/>\n                            <Tag name=\"CORS\"/>\n                            <Tag name=\"Express\"/>\n                            <Tag name=\"JWT\"/>\n                           \n                            <Tag name=\"PostgreSQL\"/>\n                            <Tag name=\"Nginx\"/>\n                            <Tag name=\"MongoDB\"/>\n                            <Tag name=\"Linux\"/>\n                            <Tag name=\"Docker\"/>\n                            <Tag name=\"Git\"/>\n                            \n                        </div>\n                    </div>\n                </div>\n            </div>\n        </section>\n    )\n}\n\n\n\n \n\n\n\n\n\n\n","import React, { useState, Fragment } from 'react';\nimport useScroll from './hooks/useScroll';\nimport { useFetch } from './hooks/useFetch';\nimport { Experience3 } from './sections/Experience3';\nimport { Experience2 } from './sections/Experience2';\nimport { Experience1 } from './sections/Experience1';\nimport { Experience0 } from './sections/Experience0';\nimport { JobName } from './sections/JobName';\nimport { KeyPractice } from './sections/KeyPractice';\nimport './App.css';\n\ninterface IAppProps {\n  name: string,\n  job: string,\n  phone: string,\n  email: string\n}\n\nfunction App(props: IAppProps) {\n  // хук useScroll положит в стэйт значение текущей \"высоты\" страницы\n  const { scrollY } = useScroll();\n\n  // это просто хук для экстраполирования имени класса в className\n  const [shrink, setShrink] = useState<string>('');\n\n  // каждые 250 мс проверяем высоту скролла, если больше 100 - устанавливаем имя класса, иначе сбрасываем\n  (function () {\n    setTimeout(() => {\n      if (scrollY >= 100) setShrink('shrink')\n      else setShrink('');\n    }, 250)\n  })()\n\n\n  // const data = useFetch('https://hn.algolia.com/api/v1/search?query=redux', {\n  //   method: 'GET'\n  // })\n\n  return (\n    <Fragment>\n      <div className=\"App\">\n        <header className={`App-header ${shrink}`}>\n          <div className=\"App-inner\">\n            <div className={`name ${shrink}`}>\n              <h1>{props.name}</h1>\n              <p>{props.job}</p>\n            </div>\n            <nav>\n              <div>\n                <p className=\"phone\">{props.phone}&nbsp;</p>\n                <p className={`email ${shrink}`}>{props.email}</p>\n              </div>\n            </nav>\n          </div>\n        </header>\n\n            <div className=\"App-main\" >\n              <JobName />\n              <Experience3 />\n              <Experience2 />\n              <Experience1 />\n              <Experience0 />\n              <KeyPractice />\n            </div>\n\n      </div>\n    </Fragment>\n  );\n}\n\nexport default App;\n","import {useState, useEffect} from 'react';\n\n// кастомный хук\nexport default function useScroll(){\n    const [scrollY, setScrollY] = useState<number>(0);\n  \n    // ф-я -обработчик события onScroll\n    const listener = ()=> {\n      // pageYOffset на случай если браузер древний\n      setScrollY(-document.body.getBoundingClientRect().top || window.pageYOffset);\n    };\n    \n    useEffect(() => {\n      window.addEventListener(\"scroll\", listener);\n      // useEffect / useLayoutEffect могут возвращать clean-up ф-ю (опционально)\n      return () => {\n        window.removeEventListener(\"scroll\", listener);\n      };\n    },[]);\n  \n    return { scrollY }\n  }","import React, { Component, ErrorInfo } from 'react';\n\ntype IErrorProps = {\n    props?: any\n};\n\ntype IErrorState = {\n    hasError: boolean,\n    error?: Error | null,\n    info: ErrorInfo | null\n};\n\nclass ErrorWrapper extends Component<IErrorProps, IErrorState> {\n    state = {\n        hasError: false,\n        error: null,\n        info: null as ErrorInfo | null \n    };\n\n    componentDidCatch(error: Error, info: ErrorInfo) {\n        this.setState({ hasError: true, error: error, info: info });\n    }\n\n    render(): React.ReactNode {\n            \n        if (this.state.hasError) {\n            console.log(this.state.info )\n            return (\n                <div>\n                    <h1>Oops, something went wrong :(</h1>\n                    <p>The error: {this.state.error}</p>\n                    <p>Where it occured: { this.state.info?.componentStack }</p>\n                </div>\n            );\n        };\n\n        return this.props.children\n    };\n}\n\nexport default ErrorWrapper;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport ErrorWrapper from './ErrorWrapper';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ErrorWrapper>\n      <App name=\"Пронин Виктор\" job=\"Web-разработчик\" phone=\" +7(977)832-73-68\" email=\" exppro1@gmail.com\"/>\n    </ErrorWrapper>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}